import { Keyboard, View } from "react-native";
import { Button, Input, Text } from "@rneui/base";
import { Controller, useForm } from "react-hook-form";
import { Picker } from "@react-native-picker/picker";
import appStyles from "../../styles/appStyle";
import buttonStyles from "../../styles/buttonStyle";
import { useState } from "react";
import { router, useLocalSearchParams } from "expo-router";
import { ExerciseResponse } from "../../api/generatorApi";
import { ExerciseCreate } from "../../generated";
import { ExerciseType } from "../../generated";
import { exercisesApi } from "../../api";
import { Platform } from "react-native";
import { COLORS } from "../../constants";
import { useFetchExercises } from "../../utils/providers/FetchExercisesContext";
import ErrorModal from "../../components/error";
import useErrorModal from "../../utils/hooks/useErrorModal";

const CreateExercise = () => {
  const { workout_id, title } = useLocalSearchParams<{
    workout_id: string;
    title?: string;
  }>();
  const {
    control,
    handleSubmit,
    formState: { errors },
    getValues,
  } = useForm();
  const { errorVisible, errorMessage, showError, closeError } = useErrorModal();

  const Item: any = Picker.Item;

  const [loadingState, setLoadingState] = useState(false);
  const [selectedType, setSelectedType] = useState("cardio");
  const [selectedExercises, setSelectedExercises] = useState<
    ExerciseResponse[]
  >([]);
  const { setShouldFetch } = useFetchExercises();

  const capitalizeFirstLetter = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  const addExerciseForm = async (formData: any) => {
    const { name, muscle, equipment, description } = formData;

    const exerciseData: ExerciseResponse = {
      name: name,
      type: selectedType,
      muscle: muscle,
      equipment: equipment,
      description: description,
      difficulty: "NA",
    };

    selectedExercises.push(exerciseData);
    await handleAddExercisesToWorkout();
  };

  const handleAddExercisesToWorkout = async () => {
    setLoadingState(true);
    selectedExercises.forEach((exercise) => {
      let apiExercise: ExerciseCreate = {
        name: exercise.name,
        type: exercise.type as ExerciseType,
        muscle: exercise.muscle,
        equipment: exercise.equipment,
        description: exercise.description,
      };
      exercisesApi
        .createExercise(workout_id, apiExercise)
        .then((response) => {
          setLoadingState(false);
          setShouldFetch(true);
        })
        .catch((err) => {
          console.log(err);
          setLoadingState(false);
          showError(`Failed to add exercise: ${err}`);
        });
    });
    router.push({
      pathname: `/workout/${workout_id}`,
      params: { title: title },
    });
  };

  return (
    <View style={appStyles.formContainer}>
      <Controller
        control={control}
        render={({ field: { onChange, onBlur, value } }) => (
          <Input
            style={appStyles.text}
            onBlur={onBlur}
            onChangeText={(value) => onChange(value)}
            value={value}
            errorMessage={errors.name && `${errors.name.message}`}
            placeholder="Exercise Name"
          />
        )}
        name="name"
        rules={{
          required: "Name is required.",
        }}
        defaultValue={""}
      />
      <Text style={{ ...appStyles.text }}>Exercise Type:</Text>
      <Picker
        style={{
          ...appStyles.picker,
          height: Platform.OS === "ios" ? 125 : 40,
        }}
        itemStyle={{
          ...appStyles.picker,
          height: Platform.OS === "ios" ? 125 : 40,
        }}
        selectedValue={selectedType}
        onValueChange={(itemValue) => setSelectedType(itemValue)}
        dropdownIconColor={Platform.OS === "android" ? COLORS.text : ""}
      >
        <Item style={appStyles.picker} label="Cardio" value="cardio" />
        <Item style={appStyles.picker} label="Strength" value="strength" />
        <Item style={appStyles.picker} label="Stretching" value="stretching" />
        <Item
          style={appStyles.picker}
          label="Plyometrics"
          value="plyometrics"
        />
      </Picker>
      {/* FIX - need to update to handle new muscle types from back end, now generated by AI */}
      {/* <Picker
        style={{
          ...appStyles.picker,
          height: Platform.OS === "ios" ? 125 : 40,
        }}
        itemStyle={{
          ...appStyles.picker,
          height: Platform.OS === "ios" ? 125 : 40,
        }}
        selectedValue={selectedMuscle}
        onValueChange={(itemValue, itemIndex) => setSelectedMuscle(itemValue)}
        dropdownIconColor={Platform.OS === "android" ? COLORS.text : ""}
      >
        {muscleTypes.map((muscle, index) => (
          <Item
            style={appStyles.picker}
            key={index}
            label={capitalizeFirstLetter(muscle)}
            value={muscle}
          />
        ))}
      </Picker> */}
      <Controller
        control={control}
        render={({ field: { onChange, onBlur, value } }) => (
          <Input
            style={appStyles.text}
            onBlur={onBlur}
            onChangeText={(value) => onChange(value)}
            value={value}
            errorMessage={errors.muscle && `${errors.musclex.message}`}
            placeholder="Muscle"
          />
        )}
        name="muscle"
        defaultValue={""}
      />
      <Controller
        control={control}
        render={({ field: { onChange, onBlur, value } }) => (
          <Input
            style={appStyles.text}
            onBlur={onBlur}
            onChangeText={(value) => onChange(value)}
            value={value}
            errorMessage={errors.equipment && `${errors.equipment.message}`}
            placeholder="Equipment"
          />
        )}
        name="equipment"
        defaultValue={""}
      />
      <Controller
        control={control}
        render={({ field: { onChange, onBlur, value } }) => (
          <Input
            style={appStyles.text}
            returnKeyType="done"
            inputStyle={{
              height: 80, // Adjust the height to fit multiple lines
              textAlignVertical: "top", // Only affects Android
            }}
            onBlur={onBlur}
            onChangeText={(value) => onChange(value)}
            value={value}
            errorMessage={errors.description && `${errors.description.message}`}
            placeholder="Enter Description"
            multiline={true}
            onSubmitEditing={() => Keyboard.dismiss()}
            blurOnSubmit={true}
          />
        )}
        name="description"
        defaultValue={""}
      />
      <Button
        buttonStyle={buttonStyles.primaryButton}
        title="Add Exercise"
        loading={loadingState}
        containerStyle={buttonStyles.buttonContainer}
        onPress={handleSubmit(addExerciseForm)}
      />
      <ErrorModal
        visible={errorVisible}
        errorMessage={errorMessage}
        onClose={closeError}
      />
    </View>
  );
};

export default CreateExercise;
